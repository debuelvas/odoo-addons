{
  "rule": [
      {"code":"SUELDO", "struct_id":"Estructura Base",  "sequence": 1 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Sueldo",   "condition_python":"result = payslip.liquidar_por in('nomina')",   "amount_python_compute":"result = (contract.wage * (payslip.dias_a_pagar/30))",   "category_id":"ING_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"COM", "struct_id":"Estructura Base",  "sequence": 2 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Comisiones",   "condition_python":"if inputs.COM and contract.tipo_salario in('tradicional','integral'):\n result = inputs.COM.amount != 0",   "amount_python_compute":"if inputs.COM:\n     result = inputs.COM.amount\nelse:\n     result = 0",   "category_id":"ING_SAL",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"HED_MAN",  "struct_id":"Estructura Base",  "sequence": 3 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HED_MAN.amount/float(inputs.HED_MAN.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"HED_MAN",   "condition_python":"if inputs.HED_MAN:\n     result = inputs.HED_MAN.amount != 0 and contract.tipo_salario=='tradicional'",   "amount_python_compute":"result = inputs.HED_MAN.amount",   "category_id":"HED",   "quantity":"inputs.HED_MAN.descripcion",   "origin_partner":"employee"},
      {"code":"HEN_MAN",  "struct_id":"Estructura Base",  "sequence": 3 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HEN_MAN.amount/float(inputs.HEN_MAN.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"HEN_MAN",   "condition_python":"if inputs.HEN_MAN:\n     result = inputs.HEN_MAN.amount != 0 and contract.tipo_salario=='tradicional'",   "amount_python_compute":"result = inputs.HEN_MAN.amount",   "category_id":"HEN",   "quantity":"inputs.HEN_MAN.descripcion",   "origin_partner":"employee"},
      {"code":"HEDDF_MAN",  "struct_id":"Estructura Base",  "sequence": 3 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HEDDF_MAN.amount/float(inputs.HEDDF_MAN.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"HEDDF_MAN",   "condition_python":"if inputs.HEDDF_MAN:\n     result = inputs.HEDDF_MAN.amount != 0 and contract.tipo_salario=='tradicional'",   "amount_python_compute":"result = inputs.HEDDF_MAN.amount",   "category_id":"HEDDF",   "quantity":"inputs.HEDDF_MAN.descripcion",   "origin_partner":"employee"},
      {"code":"HENDF_MAN",  "struct_id":"Estructura Base",  "sequence": 3 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HENDF_MAN.amount/float(inputs.HENDF_MAN.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"HENDF_MAN",   "condition_python":"if inputs.HENDF_MAN:\n     result = inputs.HENDF_MAN.amount != 0 and contract.tipo_salario=='tradicional'",   "amount_python_compute":"result = inputs.HENDF_MAN.amount",   "category_id":"HENDF",   "quantity":"inputs.HENDF_MAN.descripcion",   "origin_partner":"employee"},

      {"code":"HED_AUT",  "struct_id":"Estructura Base",  "sequence": 4 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HED_AUT.amount/float(inputs.HED_AUT.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"HED_AUT",   "condition_python":"if inputs.HED_AUT:\n     result = inputs.HED_AUT.amount and contract.tipo_salario=='tradicional' and payslip.liquidar_por in('nomina','definitiva')",   "amount_python_compute":"result = inputs.HED_AUT.amount",   "category_id":"HED",   "quantity":"inputs.HED_AUT.descripcion",   "origin_partner":"employee"},
      {"code":"HEN_AUT",  "struct_id":"Estructura Base",  "sequence": 4 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HEN_AUT.amount/float(inputs.HEN_AUT.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"HEN_AUT",   "condition_python":"if inputs.HEN_AUT:\n     result = inputs.HEN_AUT.amount and contract.tipo_salario=='tradicional' and payslip.liquidar_por in('nomina','definitiva')",   "amount_python_compute":"result = inputs.HEN_AUT.amount",   "category_id":"HEN",   "quantity":"inputs.HEN_AUT.descripcion",   "origin_partner":"employee"},
      {"code":"HEDDF_AUT",  "struct_id":"Estructura Base",  "sequence": 4 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HEDDF_AUT.amount/float(inputs.HEDDF_AUT.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"HEDDF_AUT",   "condition_python":"if inputs.HEDDF_AUT:\n     result = inputs.HEDDF_AUT.amount and contract.tipo_salario=='tradicional' and payslip.liquidar_por in('nomina','definitiva')",   "amount_python_compute":"result = inputs.HEDDF_AUT.amount",   "category_id":"HEDDF",   "quantity":"inputs.HEDDF_AUT.descripcion",   "origin_partner":"employee"},
      {"code":"HENDF_AUT",  "struct_id":"Estructura Base",  "sequence": 4 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HENDF_AUT.amount/float(inputs.HENDF_AUT.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"HENDF_AUT",   "condition_python":"if inputs.HENDF_AUT:\n     result = inputs.HENDF_AUT.amount and contract.tipo_salario=='tradicional' and payslip.liquidar_por in('nomina','definitiva')",   "amount_python_compute":"result = inputs.HENDF_AUT.amount",   "category_id":"HENDF",   "quantity":"inputs.HENDF_AUT.descripcion",   "origin_partner":"employee"},

      {"code":"TOTAL_HOR_EXT",  "struct_id":"Estructura Base",  "sequence": 5 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"TOTAL_HOR_EXT",   "condition_python":"result = categories.HOR_EXT",   "amount_python_compute":"result=categories.HOR_EXT","category_id":"BAS_CAL",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"HRN_MAN",  "struct_id":"Estructura Base",  "sequence": 6 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HRN_MAN.amount/float(inputs.HRN_MAN.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"HRN_MAN",   "condition_python":"if inputs.HRN_MAN:\n     result = inputs.HRN_MAN.amount != 0 and contract.tipo_salario=='tradicional'",   "amount_python_compute":"result = inputs.HRN_MAN.amount",   "category_id":"HRN",   "quantity":"inputs.HRN_MAN.descripcion",   "origin_partner":"employee"},
      {"code":"HRDDF_MAN",  "struct_id":"Estructura Base",  "sequence": 6 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HRDDF_MAN.amount/float(inputs.HRDDF_MAN.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"HRDDF_MAN",   "condition_python":"if inputs.HRDDF_MAN:\n     result = inputs.HRDDF_MAN.amount != 0 and contract.tipo_salario=='tradicional'",   "amount_python_compute":"result = inputs.HRDDF_MAN.amount",   "category_id":"HRDDF",   "quantity":"inputs.HRDDF_MAN.descripcion",   "origin_partner":"employee"},
      {"code":"HRNDF_MAN",  "struct_id":"Estructura Base",  "sequence": 6 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HRNDF_MAN.amount/float(inputs.HRNDF_MAN.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"HRNDF_MAN",   "condition_python":"if inputs.HRNDF_MAN:\n     result = inputs.HRNDF_MAN.amount != 0 and contract.tipo_salario=='tradicional'",   "amount_python_compute":"result = inputs.HRNDF_MAN.amount",   "category_id":"HRNDF",   "quantity":"inputs.HRNDF_MAN.descripcion",   "origin_partner":"employee"},

      {"code":"HRN_AUT",  "struct_id":"Estructura Base",  "sequence": 7 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HRN_AUT.amount/float(inputs.HRN_AUT.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"HRN_AUT",   "condition_python":"if inputs.HRN_AUT:\n     result = inputs.HRN_AUT.amount and contract.tipo_salario=='tradicional' and payslip.liquidar_por in('nomina','definitiva')",   "amount_python_compute":"result = inputs.HRN_AUT.amount",   "category_id":"HRN",   "quantity":"inputs.HRN_AUT.descripcion",   "origin_partner":"employee"},
      {"code":"HRDDF_AUT",  "struct_id":"Estructura Base",  "sequence": 7 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HRDDF_AUT.amount/float(inputs.HRDDF_AUT.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"HRDDF_AUT",   "condition_python":"if inputs.HRDDF_AUT:\n     result = inputs.HRDDF_AUT.amount and contract.tipo_salario=='tradicional' and payslip.liquidar_por in('nomina','definitiva')",   "amount_python_compute":"result = inputs.HRDDF_AUT.amount",   "category_id":"HRDDF",   "quantity":"inputs.HRDDF_AUT.descripcion",   "origin_partner":"employee"},
      {"code":"HRNDF_AUT",  "struct_id":"Estructura Base",  "sequence": 7 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"inputs.HRNDF_AUT.amount/float(inputs.HRNDF_AUT.descripcion)",   "amount_select":"percentage",   "active":"True",   "condition_range_max":"0",   "name":"HRNDF_AUT",   "condition_python":"if inputs.HRNDF_AUT:\n     result = inputs.HRNDF_AUT.amount and contract.tipo_salario=='tradicional' and payslip.liquidar_por in('nomina','definitiva')",   "amount_python_compute":"result = inputs.HRNDF_AUT.amount",   "category_id":"HRNDF",   "quantity":"inputs.HRNDF_AUT.descripcion",   "origin_partner":"employee"},

      {"code":"TOTAL_RECARGO",  "struct_id":"Estructura Base",  "sequence": 8 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"TOTAL_RECARGO",   "condition_python":"result = categories.RECARGO",   "amount_python_compute":"result = categories.RECARGO",   "category_id":"BAS_CAL",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"INCAPACIDAD_COMUN", "struct_id":"Estructura Base",  "sequence": 9 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"INCAPACIDAD_COMUN",   "condition_python":"result= payslip.liquidar_por in('nomina','definitiva') and inputs.INCAPACIDAD_COMUN and inputs.INCAPACIDAD_COMUN.amount\n ",   "amount_python_compute":"result =inputs.INCAPACIDAD_COMUN.amount ",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"VAC",  "struct_id":"Estructura Base",  "sequence": 10 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"100.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Vacaciones",   "condition_python":"result = payslip.liquidar_por=='vacaciones' and contract.tipo_salario in('tradicional','integral')",   "amount_python_compute":"salario_base = (payslip.wage+payslip.promedio_variable_sin_extras_ni_rdominicalf_360)\nresult = (salario_base/30) * payslip.dias_a_pagar",   "category_id":"ING_SAL",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"BONIFICACION_S", "struct_id":"Estructura Base",  "sequence": 11 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"BONIFICACION_S",   "condition_python":"result= inputs.BONIFICACION_S and inputs.BONIFICACION_S.amount and contract.tipo_salario in ('tradicional','integral')",   "amount_python_compute":"result = inputs.BONIFICACION_S.amount",   "category_id":"ING_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"AUXILIO_S", "struct_id":"Estructura Base",  "sequence": 12 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"AUXILIO_S",   "condition_python":"result= inputs.AUXILIO_S and inputs.AUXILIO_S.amount and contract.tipo_salario in ('tradicional','integral')",   "amount_python_compute":"result = inputs.AUXILIO_S.amount",   "category_id":"ING_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"BONO_EPCTV_S", "struct_id":"Estructura Base",  "sequence": 13 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"BONO_EPCTV_S",   "condition_python":"result= inputs.BONO_EPCTV_S and inputs.BONO_EPCTV_S.amount and contract.tipo_salario in ('tradicional','integral')",   "amount_python_compute":"result = inputs.BONO_EPCTV_S.amount",   "category_id":"ING_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"BONO_EPCTV_ALIMENTACION_S", "struct_id":"Estructura Base",  "sequence": 14 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"BONO_EPCTV_ALIMENTACION_S",   "condition_python":"result= inputs.BONO_EPCTV_ALIMENTACION_S and inputs.BONO_EPCTV_ALIMENTACION_S.amount and contract.tipo_salario in ('tradicional','integral')",   "amount_python_compute":"result = inputs.BONO_EPCTV_ALIMENTACION_S.amount",   "category_id":"ING_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"OTRO_DEVENGADO_S", "struct_id":"Estructura Base",  "sequence": 15 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"OTRO_DEVENGADO_S",   "condition_python":"result= inputs.OTRO_DEVENGADO_S and inputs.OTRO_DEVENGADO_S.amount and contract.tipo_salario in ('tradicional','integral')",   "amount_python_compute":"result =inputs.OTRO_DEVENGADO_S.amount ",   "category_id":"ING_SAL",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"ING_SAL", "struct_id":"Estructura Base",  "sequence": 16 ,   "appears_on_payslip":"False",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Ingreso salarial",   "condition_python":"result = payslip.liquidar_por in('nomina','vacaciones','definitiva') ",   "amount_python_compute":"result = categories.ING_SAL",   "category_id":"BAS_CAL",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"BONIFICACION_NS", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"BONIFICACION_NS",   "condition_python":"result= inputs.BONIFICACION_NS and inputs.BONIFICACION_NS.amount ",   "amount_python_compute":"result = inputs.BONIFICACION_NS.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"AUXILIO_NS", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"AUXILIO_NS",   "condition_python":"result= inputs.AUXILIO_NS and inputs.AUXILIO_NS.amount ",   "amount_python_compute":"result = inputs.AUXILIO_NS.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"COMPENSACION_O", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"COMPENSACION_O",   "condition_python":"result= inputs.COMPENSACION_O and inputs.COMPENSACION_O.amount ",   "amount_python_compute":"result = inputs.COMPENSACION_O.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"COMPENSACION_E", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"COMPENSACION_E",   "condition_python":"result= inputs.COMPENSACION_E and inputs.COMPENSACION_E.amount ",   "amount_python_compute":"result = inputs.COMPENSACION_E.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"BONO_EPCTV_NS", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"BONO_EPCTV_NS",   "condition_python":"result= inputs.BONO_EPCTV_NS and inputs.BONO_EPCTV_NS.amount  ",   "amount_python_compute":"result = inputs.BONO_EPCTV_NS.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"BONO_EPCTV_ALIMENTACION_NS", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"BONO_EPCTV_ALIMENTACION_NS",   "condition_python":"result= inputs.BONO_EPCTV_ALIMENTACION_NS and inputs.BONO_EPCTV_ALIMENTACION_NS.amount ",   "amount_python_compute":"result = inputs.BONO_EPCTV_ALIMENTACION_NS.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"ANTICIPO", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"ANTICIPO",   "condition_python":"result= inputs.ANTICIPO and inputs.ANTICIPO.amount ",   "amount_python_compute":"result = inputs.ANTICIPO.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"APOYO_SOST", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"APOYO_SOST",   "condition_python":"result= inputs.APOYO_SOST and inputs.APOYO_SOST.amount ",   "amount_python_compute":"result = inputs.APOYO_SOST.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"TELETRABAJO", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"TELETRABAJO",   "condition_python":"result= inputs.TELETRABAJO and inputs.TELETRABAJO.amount ",   "amount_python_compute":"result = inputs.TELETRABAJO.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"BONIF_RETIRO", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"BONIF_RETIRO",   "condition_python":"result= inputs.BONIF_RETIRO and inputs.BONIF_RETIRO.amount ",   "amount_python_compute":"result = inputs.BONIF_RETIRO.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"INDEMNIZACION", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"INDEMNIZACION",   "condition_python":"result= inputs.INDEMNIZACION and inputs.INDEMNIZACION.amount ",   "amount_python_compute":"result = inputs.INDEMNIZACION.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"REINTEGRO", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"REINTEGRO",   "condition_python":"result= inputs.REINTEGRO and inputs.REINTEGRO.amount ",   "amount_python_compute":"result = inputs.REINTEGRO.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"OTRO_DEVENGADO_NS", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"OTRO_DEVENGADO_NS",   "condition_python":"result= inputs.OTRO_DEVENGADO_NS and inputs.OTRO_DEVENGADO_NS.amount ",   "amount_python_compute":"result =inputs.OTRO_DEVENGADO_NS.amount ",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"PAGOS_TERCEROS_DEV", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"PAGOS_TERCEROS_DEV",   "condition_python":"result= inputs.PAGOS_TERCEROS_DEV and inputs.PAGOS_TERCEROS_DEV.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result = inputs.PAGOS_TERCEROS_DEV.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"IND_ACC_ENF", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"INDEMNIZACION_ACCIDENTE_ENFERMEDAD",   "condition_python":"result= inputs.IND_ACC_ENF and inputs.IND_ACC_ENF.amount ",   "amount_python_compute":"result = inputs.IND_ACC_ENF.amount ",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"IND_PRO_MAT", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"INDEMNIZACION_PROTECCION_MATERNIDAD",   "condition_python":"result= inputs.IND_PRO_MAT and inputs.IND_PRO_MAT.amount ",   "amount_python_compute":"result = inputs.IND_PRO_MAT.amount ",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"GAS_ENT", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"GASTOS_ENTIERRO",   "condition_python":"result= inputs.GAS_ENT and inputs.GAS_ENT.amount ",   "amount_python_compute":"result= inputs.GAS_ENT.amount ",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"VACACIONES_COMPENSADAS", "struct_id":"Estructura Base",  "sequence": 17 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"VACACIONES_COMPENSADAS",   "condition_python":"result= inputs.VACACIONES_COMPENSADAS and inputs.VACACIONES_COMPENSADAS.amount\n ",   "amount_python_compute":"result = inputs.VACACIONES_COMPENSADAS.amount",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"BAS_SEG_SOC_AFP_EPS", "struct_id":"Estructura Base",  "sequence": 19 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Base seguridad social(AFP-EPS)",     "condition_python":"result = payslip.liquidar_por in('nomina','vacaciones','definitiva') ",   "amount_python_compute":"diff = 0\nif payslip.liquidar_por==\"vacaciones\":\n   if contract.salario_variable:\n      IBC = payslip.ibc_seguridad_social_mes_anterior*payslip.dias/30 if  payslip.ibc_seguridad_social_mes_anterior else contract.wage*payslip.dias/30\n   else:\n      IBC = contract.wage*payslip.dias/30\nelse:\n   #Calcula el 40% de los ingresos totales (ingresos salariales + ingresos no salariales)\n   limit_40 =(categories.ING_SAL + categories.ING_NO_SAL) * 0.4\n   diff = (categories.ING_NO_SAL - limit_40) if categories.ING_NO_SAL > limit_40 else 0\n   IBC = categories.ING_SAL + (inputs.INCAPACIDAD_COMUN.amount if inputs.INCAPACIDAD_COMUN and inputs.INCAPACIDAD_COMUN.amount else 0)   \n\nif contract.tipo_salario == 'integral':\n  result = min(25*payslip.smlv*(payslip.dias_a_pagar+payslip.dias_incapacidad_comun)/30,((IBC )*0.7 + diff))\nelif contract.tipo_salario in('practicante','aprendiz Sena'):\n  result = payslip.smlv*payslip.dias/30\nelif contract.tipo_salario in('tradicional'):\n  result = min(25*payslip.smlv*(payslip.dias_a_pagar+payslip.dias_incapacidad_comun)/30,((IBC )+ diff))\n\n#Si se supera 25smlv en el mes, se verfica si la base completa el límite\nif payslip.date_to == payslip.last_day_month:\n   #Busca todas las lineas ING_SAL dentro de ese rango de fechas y las suma (nominas = open)\n   ingresos_salarial = payslip.sum('ING_SAL',payslip.first_day_month,payslip.last_day_month) + categories.ING_SAL\n   bases_seg_soc = payslip.sum('BAS_SEG_SOC_AFP_EPS',payslip.first_day_month,payslip.last_day_month) + result\n\n   if contract.tipo_salario == 'integral':\n      ingresos_salarial*= 0.7\n   if ingresos_salarial > 25*payslip.smlv:\n      result += 25*payslip.smlv - bases_seg_soc\n   #Cuando los ingresos del mes son menores a 25smlv verifica que la base este completa\n   elif ingresos_salarial <= 25*payslip.smlv:\n      diff = ingresos_salarial -  bases_seg_soc\n      if bases_seg_soc < ingresos_salarial:\n         result += diff",   "category_id":"BAS_CAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"AFP_TRA", "struct_id":"Estructura Base",  "sequence": 20 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte AFP",                                 "condition_python":"result = payslip.liquidar_por in('nomina','vacaciones','definitiva') and contract.tipo_salario in('tradicional','integral') and not employee.pensionado", "amount_python_compute":"#Si el trabajador tiene ausencias no pagas, las asume el trabajador\nvalor_ausencias_no_pagas = (payslip.nod_unpaid_leaves)*contract.wage/30\nresult = (BAS_SEG_SOC_AFP_EPS  + valor_ausencias_no_pagas) *0.04",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"fp"},
      {"code":"AFP_COM", "struct_id":"Estructura Base",  "sequence": 21 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte AFP Compañía",                            "condition_python":"result = payslip.liquidar_por in('nomina','vacaciones','definitiva') and contract.tipo_salario in('tradicional','integral') and not employee.pensionado",   "amount_python_compute":"#La empresa siempre paga el porcentaje correspondiente \nvalor_ausencias_no_pagas = (payslip.nod_unpaid_leaves)*contract.wage/30\nresult = (valor_ausencias_no_pagas + BAS_SEG_SOC_AFP_EPS) * 0.12",   "category_id":"SEG_SOC_PAR",   "quantity":"1.0",   "origin_partner":"fp"},
      {"code":"EPS_TRA", "struct_id":"Estructura Base",  "sequence": 22 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte EPS",                                 "condition_python":"result = payslip.liquidar_por in('nomina','definitiva','vacaciones') and contract.tipo_salario in('tradicional','integral')","amount_python_compute":"result=BAS_SEG_SOC_AFP_EPS* 0.04 ",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"eps"},


      {"code":"EPS_COM", "struct_id":"Estructura Base",  "sequence": 23 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte EPS Compañía",                            "condition_python":"result = False\nif payslip.liquidar_por in('nomina','vacaciones','definitiva'):\n    valor_ausencias_no_pagas=(payslip.nod_unpaid_leaves)*contract.wage/30\n    base_comparar_10smmlv = BAS_SEG_SOC_AFP_EPS+valor_ausencias_no_pagas\n    supera_10smmlv = base_comparar_10smmlv/payslip.dias>payslip.smlv * 10/30\n    result = (contract.tipo_salario in('practicante','aprendiz Sena','integral') or not employee.company_id.ley_1607 or supera_10smmlv) and contract.tipo_salario not in ('pasante')", "amount_python_compute":"if contract.tipo_salario == 'integral':\n  valor_ausencias_no_pagas = (payslip.nod_unpaid_leaves)*contract.wage*0.7/30\nelif contract.tipo_salario in('tradicional'):\n  valor_ausencias_no_pagas = (payslip.nod_unpaid_leaves)*contract.wage/30\n\nif valor_ausencias_no_pagas+BAS_SEG_SOC_AFP_EPS>25*payslip.smlv*(payslip.dias_a_pagar+payslip.dias_incapacidad_comun+payslip.nod_unpaid_leaves)/30:\n  valor_ausencias_no_pagas = payslip.nod_unpaid_leaves*25*payslip.smlv/30\n  base = (payslip.dias_a_pagar+payslip.dias_incapacidad_comun)*25*payslip.smlv/30\nelse:\n  base = BAS_SEG_SOC_AFP_EPS\n\nif contract.tipo_salario in('practicante','aprendiz Sena','pasante'):\n  eps_comp = payslip.smlv*payslip.dias * 0.125 /30\nelif contract.tipo_salario in('tradicional','integral'):\n  eps_comp = (valor_ausencias_no_pagas+base)*0.085 \n\nresult = eps_comp",   "category_id":"SEG_SOC_PAR",   "quantity":"1.0",   "origin_partner":"eps"},

      {"code":"BAS_SEG_SOC_ARL", "struct_id":"Estructura Base",  "sequence": 24 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Base seguridad social(ARL)",   "condition_python":"result = payslip.liquidar_por in('nomina') ",   "amount_python_compute":"#Calcula el 40% de los ingresos totales (ingresos salariales + ingresos no salariales)\nlimit_40 =(categories.ING_SAL + categories.ING_NO_SAL) * 0.4\ndiferencia = (categories.ING_NO_SAL - limit_40) if categories.ING_NO_SAL > limit_40 else 0\n\nvalor_dias_trabajados = ING_SAL-payslip.nod_paid_leaves*contract.wage/30\nif contract.tipo_salario == 'integral':\n  result = min(25*payslip.smlv*payslip.dias_trabajados/30,valor_dias_trabajados*0.7 + diferencia)\nelif contract.tipo_salario in('tradicional','practicante','aprendiz Sena','pasante'):\n  result= max(payslip.smlv*payslip.dias_trabajados/30,min(25*payslip.smlv*payslip.dias_trabajados/30,valor_dias_trabajados + diferencia))\n\n\n#Si se supera 25smlv en el mes, se verfica si la base completa el límite\nif payslip.date_to == payslip.last_day_month:\n   leaves = payslip.env['hr.payslip'].get_nod_paid_leaves(payslip.employee_id, payslip.first_day_month, payslip.last_day_month) + payslip.nod_paid_leaves\n   ingresos_salarial = payslip.sum('ING_SAL',payslip.first_day_month,payslip.last_day_month) + categories.ING_SAL\n   valor_dias_trabajados_mes = ingresos_salarial - leaves*contract.wage/30\n\n   bases_seg_soc = payslip.sum('BAS_SEG_SOC_ARL',payslip.first_day_month,payslip.last_day_month) + result\n\n   if contract.tipo_salario == 'integral':\n      valor_dias_trabajados_mes *= 0.7\n \n   #Verifica si con el último se supera los 25smlv y completa la base ARL si es necesario\n   if valor_dias_trabajados_mes > 25*payslip.smlv:\n      result += 25*payslip.smlv -   bases_seg_soc \n\n   #Cuando los ingresos del mes son menores a 25smlv verifica que la base ARL este completa\n   elif valor_dias_trabajados_mes <= 25*payslip.smlv:\n      diff = valor_dias_trabajados_mes -  bases_seg_soc\n      if bases_seg_soc < valor_dias_trabajados_mes:\n         result += diff",   "category_id":"BAS_CAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"ARL", "struct_id":"Estructura Base",  "sequence": 25 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte ARL",   "condition_python":"result = payslip.liquidar_por in('nomina')",   "amount_python_compute":"factor = 0\nif employee.nivel_arl == '1':\n   factor = 0.522\nelif employee.nivel_arl == '2':\n   factor = 1.044\nelif employee.nivel_arl == '3':\n   factor = 2.436\nelif employee.nivel_arl == '4':\n   factor = 4.350\nelif employee.nivel_arl == '5':\n   factor = 6.960\nresult = round(BAS_SEG_SOC_ARL * factor/100)",   "category_id":"SEG_SOC_PAR",   "quantity":"1.0",   "origin_partner":"arl"},

      {"code":"BAS_PAR",  "struct_id":"Estructura Base",  "sequence": 31 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Base parafiscales",   "condition_python":"result = payslip.liquidar_por in('nomina','vacaciones','definitiva') and  contract.tipo_salario in('tradicional','integral')",   "amount_python_compute":"salario_base= categories.ING_SAL+(inputs.VACACIONES_COMPENSADAS.amount if inputs.VACACIONES_COMPENSADAS else 0)\n\nif contract.tipo_salario == 'integral':\n  result = (salario_base )*0.7\nelif contract.tipo_salario in('tradicional','practicante'):\n  result= salario_base",   "category_id":"BAS_CAL",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"SENA", "struct_id":"Estructura Base",  "sequence": 32 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte SENA",   "condition_python":"result = contract.tipo_salario in ('tradicional') and (payslip.liquidar_por in('nomina','vacaciones')  and (payslip.dias_a_pagar+payslip.dias_incapacidad_comun) and not (employee.company_id.ley_1607 and (categories.ING_SAL+(inputs.INCAPACIDAD_COMUN.amount if inputs.INCAPACIDAD_COMUN else 0))/(payslip.dias_a_pagar+payslip.dias_incapacidad_comun) <= payslip.smlv * 10/30) or payslip.liquidar_por in('definitiva')) or contract.tipo_salario in ('integral')",   "amount_python_compute":"result = BAS_PAR * 0.02 ",   "category_id":"SEG_SOC_PAR",   "quantity":"1.0",   "origin_partner":"sena"},
      {"code":"ICBF", "struct_id":"Estructura Base",  "sequence": 33 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte ICBF",   "condition_python":"result = contract.tipo_salario in('tradicional','integral') and (payslip.liquidar_por in('nomina','vacaciones') and (payslip.dias_a_pagar+payslip.dias_incapacidad_comun) and not (employee.company_id.ley_1607 and (categories.ING_SAL+(inputs.INCAPACIDAD_COMUN.amount if inputs.INCAPACIDAD_COMUN else 0))/(payslip.dias_a_pagar+payslip.dias_incapacidad_comun) <= payslip.smlv * 10/30) or payslip.liquidar_por in('definitiva')) or contract.tipo_salario in ('integral')",   "amount_python_compute":"result = BAS_PAR * 0.03 ",   "category_id":"SEG_SOC_PAR",   "quantity":"1.0",   "origin_partner":"icbf"},
      {"code":"CCF",  "struct_id":"Estructura Base", "sequence": 34 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte CCF",   	"condition_python":"result = contract.tipo_salario in('tradicional','integral') and (payslip.liquidar_por in('nomina','vacaciones') and (payslip.dias_a_pagar+payslip.dias_incapacidad_comun) or payslip.liquidar_por in('definitiva'))",   "amount_python_compute":"result = BAS_PAR * 0.04 ",   "category_id":"SEG_SOC_PAR",   "quantity":"1.0",   "origin_partner":"ccf"},

      {"code":"AUX_TRA", "struct_id":"Estructura Base",  "sequence": 41 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Auxilio de transporte/conectividad",   "condition_python":"dias_trabajados = int(payslip.dias_trabajados)+(1 if  payslip.dias_trabajados-int(payslip.dias_trabajados) else 0)\ndias_trabajados = dias_trabajados+int(payslip.dias_trabajados_mes_hecho)+(1 if  payslip.dias_trabajados_mes_hecho-int(payslip.dias_trabajados_mes_hecho) else 0)\ntry:\n    horas_extras=TOTAL_HOR_EXT\nexcept:    horas_extras=0\ntry:\n    comisiones=COM\nexcept:    comisiones=0\nresult = False\nif not employee.exento_transporte and payslip.liquidar_por in('nomina','vacaciones') and contract.tipo_salario=='tradicional' :\n    dias_condicion = dias_trabajados\n    ganado_condicion = ( ING_SAL- horas_extras\n                                       +payslip.sum('ING_SAL',payslip.first_day_month,payslip.last_day_month)\n                                       -payslip.sum('TOTAL_HOR_EXT',payslip.first_day_month,payslip.last_day_month)\n                                       -payslip.sum('VAC',payslip.first_day_month,payslip.last_day_month))\n    if  not (payslip.dias_trabajados and ganado_condicion/(payslip.dias_a_pagar_hecho + payslip.dias_a_pagar)  > payslip.smlv * 2/30):  \n        result = True","amount_python_compute":"dias_trabajados = int(payslip.dias_trabajados)+(1 if  payslip.dias_trabajados-int(payslip.dias_trabajados) else 0)\ndias_trabajados = dias_trabajados+int(payslip.dias_trabajados_mes_hecho)+(1 if  payslip.dias_trabajados_mes_hecho-int(payslip.dias_trabajados_mes_hecho) else 0)\ntry:\n    horas_extras=TOTAL_HOR_EXT\nexcept:    horas_extras=0\ntry:\n    comisiones=COM\nexcept:    comisiones=0\nresult = 0\nif not employee.exento_transporte and payslip.liquidar_por in('nomina','vacaciones') and contract.tipo_salario=='tradicional' :\n    if payslip.liquidar_por in('vacaciones'):\n        result = 0\n    else:\n        dias_condicion = dias_trabajados\n        ganado_condicion = ( ING_SAL- horas_extras\n                                        +payslip.sum('ING_SAL',payslip.first_day_month,payslip.last_day_month)\n                                        -payslip.sum('TOTAL_HOR_EXT',payslip.first_day_month,payslip.last_day_month)\n                                        -payslip.sum('VAC',payslip.first_day_month,payslip.last_day_month))\n        if  payslip.dias_trabajados == 0 or ganado_condicion/(payslip.dias_a_pagar_hecho + payslip.dias_a_pagar) > payslip.smlv * 2/30: \n            at_a_pagar=0\n        else:\n            at_a_pagar=payslip.aux_trans * (dias_trabajados )/30\n        at_pagado = payslip.sum('AUX_TRA',payslip.first_day_month,payslip.last_day_month)\n        result = at_a_pagar - at_pagado",   "category_id":"ING_NO_SAL",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"AFC", "struct_id":"Estructura Base",  "sequence": 42 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte AFC",   "condition_python":"result = payslip.liquidar_por in('nomina') and  employee.afc > 0 and payslip.date_to==payslip.last_day_month",   "amount_python_compute":"result = employee.afc",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"AVC", "struct_id":"Estructura Base",  "sequence": 42 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte AVC",   "condition_python":"result = payslip.liquidar_por in('nomina') and  employee.avc > 0 and payslip.date_to==payslip.last_day_month",   "amount_python_compute":"result = employee.avc",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"FPV", "struct_id":"Estructura Base",  "sequence": 43 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte FPV",   "condition_python":"result = payslip.liquidar_por in('nomina') and employee.fpv > 0 and payslip.date_to==payslip.last_day_month",   "amount_python_compute":"result = employee.fpv ",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},


      {"code":"BAS_FS", "struct_id":"Estructura Base",  "sequence": 44 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Base Fondo de solidaridad",  "condition_python":"result = payslip.liquidar_por in('nomina','definitiva','vacaciones') and contract.tipo_salario in('tradicional','integral')",  "amount_python_compute":"salario_base = categories.ING_SAL+(inputs.INCAPACIDAD_COMUN.amount if inputs.INCAPACIDAD_COMUN and inputs.INCAPACIDAD_COMUN.amount else 0)\nif contract.tipo_salario == 'integral':\n  result = (salario_base)*0.7\nelif contract.tipo_salario in('practicante','aprendiz Sena'):\n  result = payslip.smlv*payslip.dias/30\nelif contract.tipo_salario in('tradicional'):\n  result = salario_base ", "category_id":"BAS_CAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"FON_SOL_SOL",  "struct_id":"Estructura Base", "sequence": 45 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"1.0000",   "condition_range_min":"0",  "condition_select":"python",  "amount_percentage_base":"0",  "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte fondo de solidaridad-Solidaridad",  "condition_python":"result = 0\nif payslip.liquidar_por in('nomina','definitiva','vacaciones') and contract.tipo_salario in('tradicional','integral'):\n\ttot_base = payslip.base_fondo_solidaridad_hecho + BAS_FS\n\tfondo_pago = payslip.solidarity_fund_paid\n\tresult = not employee.pensionado and ((BAS_FS >= (payslip.smlv/30 * (payslip.dias_trabajados + payslip.dias_incapacidad_comun + payslip.nod_paid_leaves) * 4)) or (abs(BAS_FS - (payslip.smlv/30 * (payslip.dias_trabajados + payslip.dias_incapacidad_comun + payslip.nod_paid_leaves) * 4))<0.01) or (tot_base>= payslip.smlv * 4) or fondo_pago!=0)\n", "amount_python_compute":"base_fs_mes = BAS_FS\nporcentaje = 0\nporcentaje_pensionado=0\n\ndias_liq = 0\nif payslip.liquidar_por in ('vacaciones'):\n\tdias_liq = payslip.dias_vacaciones\nelse:\n\tdias_liq = payslip.dias_trabajados + payslip.dias_incapacidad_comun + payslip.nod_paid_leaves\n\nif base_fs_mes >= payslip.smlv/30 * dias_liq * 4 or (abs(base_fs_mes-(payslip.smlv/30 * dias_liq * 4))<0.01):\n\tporcentaje=0.005\nporcentaje = porcentaje if not employee.pensionado\telse porcentaje_pensionado\ncurrent_payrroll_fund = base_fs_mes * porcentaje\nif payslip.liquidar_por in ('nomina','definitiva'):\n\tif payslip.date_to== payslip.last_day_month:\n\t\ttot_base = payslip.base_fondo_solidaridad_hecho + BAS_FS\n\t\tfondo_pago = payslip.solidarity_fund_paid\n\t\tif tot_base >= payslip.smlv * 4 or (abs(tot_base-(payslip.smlv * 4))<0.01):\n\t\t\tporcentaje = 0.005\n\t\t\tif tot_base * porcentaje == (fondo_pago + current_payrroll_fund):\n\t\t\t\tresult = current_payrroll_fund\n\t\t\telse:\n\t\t\t\tresult = (tot_base * porcentaje) - fondo_pago\n\t\telse:\n\t\t\tif fondo_pago>0:\n\t\t\t\tresult = -fondo_pago\n\t\t\telse:\n\t\t\t\tresult = 0\n\n\telse:\n\t\tresult = current_payrroll_fund\n\nelif payslip.liquidar_por in ('vacaciones'):\n\tif payslip.date_from.month==payslip.date_to.month:\n\t\tresult = current_payrroll_fund\n\telse:\n\t\tdias_otro_mes = payslip.dias_a_pagar - payslip.days_month_date_from -1\n\t\tbase_otro_mes = (base_fs_mes/payslip.dias_a_pagar) * dias_otro_mes\n\t\tbase_mes_actual = base_fs_mes - base_otro_mes\n\n\t\tif base_mes_actual >= payslip.smlv/30 * (payslip.days_month_date_from +1) * 4 or (abs(base_mes_actual-(payslip.smlv/30 * (payslip.days_month_date_from +1) * 4))<0.01):\n\t\t\tporcentaje=0.005\n\t\t\tporcentaje = porcentaje if not employee.pensionado\telse porcentaje_pensionado\n\t\t\tmonto_mes_actual = base_mes_actual * porcentaje\n\t\telse:\n\t\t\tmonto_mes_actual = 0\n\n\t\tif base_otro_mes >= payslip.smlv/30 * (dias_otro_mes) * 4 or (abs(base_otro_mes-(payslip.smlv/30 * (dias_otro_mes) * 4))<0.01):\n\t\t\tporcentaje=0.005\n\t\t\tporcentaje = porcentaje if not employee.pensionado\telse porcentaje_pensionado\n\t\t\tmonto_otro_mes = base_otro_mes * porcentaje\n\t\telse:\n\t\t\tmonto_otro_mes = 0\n\n\t\tresult = monto_mes_actual + monto_otro_mes\n","category_id":"DED", "quantity":"50 if (payslip.sum('BAS_FS',payslip.first_day_month,payslip.last_day_month)+BAS_FS) >= payslip.smlv * 4 else 0",   "origin_partner":"fp"},
      {"code":"FON_SOL_SUB",  "struct_id":"Estructura Base", "sequence": 46 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"1.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Aporte fondo de solidaridad-Subsistencia",   "condition_python":"result = 0\nif payslip.liquidar_por in('nomina','definitiva','vacaciones') and contract.tipo_salario in('tradicional','integral'):\n\ttot_base = payslip.base_fondo_solidaridad_hecho + BAS_FS\n\tfondo_pago = payslip.subsistence_fund_paid\n\tresult = not employee.pensionado and ((BAS_FS >= (payslip.smlv/30 * (payslip.dias_trabajados + payslip.dias_incapacidad_comun + payslip.nod_paid_leaves) * 4)) or (abs(BAS_FS - (payslip.smlv/30 * (payslip.dias_trabajados + payslip.dias_incapacidad_comun + payslip.nod_paid_leaves) * 4))<0.01) or (tot_base>= payslip.smlv * 4) or fondo_pago!=0)\n\n",   "amount_python_compute":"base_fs_mes = BAS_FS\nporcentaje = 0\nporcentaje_pensionado=0\ndias_liq = 0\nif payslip.liquidar_por in ('vacaciones'):\n\tdias_liq = payslip.dias_vacaciones\nelse:\n\tdias_liq = payslip.dias_trabajados + payslip.dias_incapacidad_comun + payslip.nod_paid_leaves\n\nif base_fs_mes >= payslip.smlv/30 * dias_liq * 20 or (abs(base_fs_mes-(payslip.smlv/30 * dias_liq * 20))<0.01):\n\tporcentaje = 0.015\n\tporcentaje_pensionado=0.02\nelif base_fs_mes >= payslip.smlv/30 * dias_liq * 19 or (abs(base_fs_mes-(payslip.smlv/30 * dias_liq * 19))<0.01):\n\tporcentaje = 0.013\n\tporcentaje_pensionado=0.01\nelif base_fs_mes >= payslip.smlv/30 * dias_liq * 18 or (abs(base_fs_mes-(payslip.smlv/30 * dias_liq * 18))<0.01):\n\tporcentaje = 0.011\n\tporcentaje_pensionado=0.01\nelif base_fs_mes >= payslip.smlv/30 * dias_liq * 17 or (abs(base_fs_mes-(payslip.smlv/30 * dias_liq * 17))<0.01):\n\tporcentaje = 0.009\n\tporcentaje_pensionado=0.01\nelif base_fs_mes >= payslip.smlv/30 * dias_liq * 16 or (abs(base_fs_mes-(payslip.smlv/30 * dias_liq * 16))<0.01):\n\tporcentaje = 0.007\n\tporcentaje_pensionado=0.01\nelif base_fs_mes >= payslip.smlv/30 * dias_liq * 4 or (abs(base_fs_mes-(payslip.smlv/30 * dias_liq * 4))<0.01):\n\tporcentaje=0.005\n\nporcentaje = porcentaje if not employee.pensionado\telse porcentaje_pensionado\n\ncurrent_payrroll_fund = base_fs_mes * porcentaje\n\nif payslip.liquidar_por in ('nomina','definitiva'):\n\tif payslip.date_to== payslip.last_day_month:\n\t\ttot_base = payslip.base_fondo_solidaridad_hecho + BAS_FS\n\t\tfondo_pago = payslip.subsistence_fund_paid\n\t\tif tot_base >= payslip.smlv * 4 or (abs(tot_base-(payslip.smlv * 4)))<0.01:\n\t\t\tporcentaje = 0\n\t\t\tporcentaje_pensionado = 0\n\t\t\tif tot_base >= payslip.smlv * 20 or (abs(tot_base-(payslip.smlv * 20)))<0.01:\n\t\t\t\tporcentaje = 0.015\n\t\t\t\tporcentaje_pensionado=0.02\n\t\t\telif tot_base >= payslip.smlv * 19 or (abs(tot_base-(payslip.smlv * 19)))<0.01:\n\t\t\t\tporcentaje = 0.013\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif tot_base >= payslip.smlv * 18 or (abs(tot_base-(payslip.smlv * 18)))<0.01:\n\t\t\t\tporcentaje = 0.011\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif tot_base >= payslip.smlv * 17 or (abs(tot_base-(payslip.smlv * 17)))<0.01:\n\t\t\t\tporcentaje = 0.009\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif tot_base >= payslip.smlv * 16 or (abs(tot_base-(payslip.smlv * 16)))<0.01:\n\t\t\t\tporcentaje = 0.007\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif tot_base >= payslip.smlv * 4 or (abs(tot_base-(payslip.smlv * 4)))<0.01:\n\t\t\t\tporcentaje=0.005\n\t\t\tporcentaje = porcentaje if not employee.pensionado\telse porcentaje_pensionado\n\t\t\tif tot_base * porcentaje == (fondo_pago + current_payrroll_fund):\n\t\t\t\tresult = current_payrroll_fund\n\t\t\telse:\n\t\t\t\tresult = (tot_base * porcentaje) - fondo_pago\n\t\telse:\n\t\t\tif fondo_pago>0:\n\t\t\t\tresult = -fondo_pago\n\t\t\telse:\n\t\t\t\tresult = 0\n\n\telse:\n\t\tporcentaje = 0\n\t\tif base_fs_mes >= payslip.smlv/30 * dias_liq * 4 or (abs(base_fs_mes-(payslip.smlv/30 * dias_liq * 4))<0.01):\n\t\t\tporcentaje = 0.005\n\t\tresult = base_fs_mes * porcentaje\n\nelif payslip.liquidar_por in ('vacaciones'):\n\tif payslip.date_from.month==payslip.date_to.month:\n\t\tresult = current_payrroll_fund\n\telse:\n\t\tdias_otro_mes = payslip.dias_a_pagar - payslip.days_month_date_from - 1\n\t\tbase_otro_mes = (base_fs_mes/payslip.dias_a_pagar) * dias_otro_mes\n\t\tbase_mes_actual = base_fs_mes - base_otro_mes\n\t\tif base_mes_actual >= payslip.smlv/30 * (payslip.days_month_date_from +1) * 4 or (abs(base_mes_actual-(payslip.smlv/30 * (payslip.days_month_date_from +1) * 4))<0.01):\n\t\t\tporcentaje = 0.005\n\t\t\tporcentaje_pensionado = 0\n\t\t\tif base_mes_actual >= payslip.smlv/30 * (payslip.days_month_date_from +1) * 20 or (abs(base_mes_actual-(payslip.smlv/30 * (payslip.days_month_date_from +1) * 20))<0.01):\n\t\t\t\tporcentaje = 0.015\n\t\t\t\tporcentaje_pensionado=0.02\n\t\t\telif base_mes_actual >= payslip.smlv/30 * (payslip.days_month_date_from +1) *19 or (abs(base_mes_actual-(payslip.smlv/30 * (payslip.days_month_date_from +1) * 19))<0.01):\n\t\t\t\tporcentaje = 0.013\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif base_mes_actual >= payslip.smlv/30 * (payslip.days_month_date_from +1) * 18 or (abs(base_mes_actual-(payslip.smlv/30 * (payslip.days_month_date_from +1) * 18))<0.01):\n\t\t\t\tporcentaje = 0.011\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif base_mes_actual >= payslip.smlv/30 * (payslip.days_month_date_from +1) * 17 or (abs(base_mes_actual-(payslip.smlv/30 * (payslip.days_month_date_from +1) * 17))<0.01):\n\t\t\t\tporcentaje = 0.009\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif base_mes_actual >= payslip.smlv/30 * (payslip.days_month_date_from +1) * 16 or (abs(base_mes_actual-(payslip.smlv/30 * (payslip.days_month_date_from +1) * 16))<0.01):\n\t\t\t\tporcentaje = 0.007\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\tporcentaje = porcentaje if not employee.pensionado\telse porcentaje_pensionado\n\t\t\tmonto_mes_actual = base_mes_actual * porcentaje\n\t\telse:\n\t\t\tmonto_mes_actual = 0\n\n\t\tif base_otro_mes >= payslip.smlv/30 * (dias_otro_mes) * 4 or (abs(base_otro_mes-(payslip.smlv/30 * (dias_otro_mes) * 4))<0.01):\n\t\t\tporcentaje = 0.005\n\t\t\tporcentaje_pensionado = 0\n\t\t\tif base_mes_actual >= payslip.smlv/30 * (dias_otro_mes) * 20 or (abs(base_otro_mes-(payslip.smlv/30 * (dias_otro_mes) * 20))<0.01):\n\t\t\t\tporcentaje = 0.015\n\t\t\t\tporcentaje_pensionado=0.02\n\t\t\telif base_otro_mes >= payslip.smlv/30 * (dias_otro_mes) *19 or (abs(base_otro_mes-(payslip.smlv/30 * (dias_otro_mes) * 19))<0.01):\n\t\t\t\tporcentaje = 0.013\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif base_otro_mes >= payslip.smlv/30 * (dias_otro_mes) * 18 or (abs(base_otro_mes-(payslip.smlv/30 * (dias_otro_mes) * 18))<0.01):\n\t\t\t\tporcentaje = 0.011\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif base_otro_mes >= payslip.smlv/30 * (dias_otro_mes) * 17 or (abs(base_otro_mes-(payslip.smlv/30 * (dias_otro_mes) * 17))<0.01):\n\t\t\t\tporcentaje = 0.009\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\telif base_otro_mes >= payslip.smlv/30 * (dias_otro_mes) * 16 or (abs(base_otro_mes-(payslip.smlv/30 * (dias_otro_mes) * 16))<0.01):\n\t\t\t\tporcentaje = 0.007\n\t\t\t\tporcentaje_pensionado=0.01\n\t\t\tporcentaje = porcentaje if not employee.pensionado\telse porcentaje_pensionado\n\t\t\tmonto_otro_mes = base_otro_mes * porcentaje\n\t\telse:\n\t\t\tmonto_otro_mes = 0\n\t\tresult = monto_mes_actual + monto_otro_mes\n",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"fp"},

      {"code":"RET_FUE",  "struct_id":"Estructura Base",  "sequence": 51 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Retención en la fuente",   "condition_python":"result = payslip.liquidar_por=='nomina' and (inputs.RFMAN and inputs.RFMAN.amount>0)",   "amount_python_compute":"if (inputs.RFMAN and inputs.RFMAN.amount>0):\n  result = inputs.RFMAN.amount\nelse:\n  result=0",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"dian"},

      {"code":"PRI_SER", "struct_id":"Estructura Base",  "sequence": 61 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"100.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Prima de servicios",   	"condition_python":"result = payslip.liquidar_por in('prima','definitiva') and  contract.tipo_salario=='tradicional'",   "amount_python_compute":"try:\n  auxilio_transporte=AUX_TRA\n  auxilio_transporte=payslip.aux_trans\nexcept :\n  auxilio_transporte=0\nresult = (payslip.promedio_sal_aux_tras_180 if payslip.promedio_sal_aux_tras_180 else payslip.wage+auxilio_transporte)*payslip.dias_prima/360",   "category_id":"PRE_SOC",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"CES", "struct_id":"Estructura Base",  "sequence": 62 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"100.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Cesantías",   				"condition_python":"result = payslip.liquidar_por in('cesantias','definitiva') and contract.tipo_salario=='tradicional'",   "amount_python_compute":"auxilio_transporte = payslip.aux_trans if contract.wage < payslip.smlv * 2 else 0\nif (contract.wage +auxilio_transporte)!=payslip.promedio_sal_aux_tras_90 and payslip.promedio_sal_aux_tras_90 or contract.salario_variable:   \n    result = payslip.promedio_sal_aux_tras_360*payslip.dias_cesantias/360   \nelse:    \n    result = (contract.wage +auxilio_transporte)*payslip.dias_cesantias/360",   "category_id":"PRE_SOC",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"INT_CES", "struct_id":"Estructura Base", "sequence": 63 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"100.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Intereses de cesantías",   "condition_python":"result = payslip.liquidar_por in('intereses_cesantias','definitiva') and contract.tipo_salario=='tradicional'",   "amount_python_compute":"auxilio_transporte = payslip.aux_trans if contract.wage < payslip.smlv * 2 else 0\nif (contract.wage +auxilio_transporte)!=payslip.promedio_sal_aux_tras_90 and payslip.promedio_sal_aux_tras_90  or contract.salario_variable:   \n    cesantias = payslip.promedio_sal_aux_tras_360*payslip.dias_cesantias/360\nelse:    \n    cesantias = (contract.wage +auxilio_transporte)*payslip.dias_cesantias/360\nresult = cesantias*0.12*(payslip.dias_intereses_cesantias if payslip.dias_intereses_cesantias else payslip.dias) /360",   "category_id":"PRE_SOC",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"BAS_PRE_SOC", "struct_id":"Estructura Base",  "sequence": 64 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Base prestaciones sociales",   		"condition_python":"result = payslip.liquidar_por in('nomina','vacaciones') and contract.tipo_salario in('tradicional','integral')","amount_python_compute":"try:\n  auxilio_transporte=AUX_TRA\n  auxilio_transporte_mes=payslip.aux_trans if contract.wage < payslip.smlv * 2 else 0\nexcept :\n  auxilio_transporte=0\n  auxilio_transporte_mes = 0\n\nif payslip.liquidar_por in('nomina','definitiva') :\n  salario = (categories.ING_SAL-payslip.nod_paid_leaves*contract.wage/30+auxilio_transporte)\n  dias = payslip.dias_trabajados if payslip.dias_trabajados else 0\n  reemplazo_auxilios = (salario/dias if dias else (payslip.valor_dia_reemplazo_hecho if payslip.valor_dia_reemplazo_hecho else (payslip.wage+auxilio_transporte_mes)/30))*(payslip.nod_paid_leaves+payslip.dias_incapacidad_comun)\n  result=salario+reemplazo_auxilios\nelif payslip.liquidar_por in('vacaciones'):\n result =(payslip.valor_dia_reemplazo_hecho if payslip.valor_dia_reemplazo_hecho else (payslip.wage+auxilio_transporte_mes)/30)*payslip.dias",   "category_id":"BAS_CAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"PRO_PRI_SER", "struct_id":"Estructura Base", "sequence": 65 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00", "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Provisión prima de servicios",   			"condition_python":"result = payslip.liquidar_por in('nomina','vacaciones','definitiva') and contract.tipo_salario=='tradicional'",   "amount_python_compute":"try:\n  auxilio_transporte=AUX_TRA\n  auxilio_transporte=payslip.aux_trans if contract.wage < payslip.smlv * 2 else 0\nexcept :\n  auxilio_transporte=0\n\nif payslip.liquidar_por in('nomina','vacaciones'):\n   result = ((BAS_PRE_SOC/(payslip.dias-payslip.nod_unpaid_leaves)) if payslip.dias-payslip.nod_unpaid_leaves else (payslip.wage+auxilio_transporte)/30)*payslip.dias/12\nelif payslip.liquidar_por in('definitiva'):\n   saldo = contract.saldo_prima if contract.fecha_corte and payslip.date_from_prima<contract.fecha_corte else 0\n   provisionado = payslip.sum('PRO_PRI_SER',payslip.date_from_prima,contract.date_end)+saldo-payslip.sum('PRI_SER',payslip.date_from_prima,contract.date_end)\n   result = PRI_SER-provisionado",   "category_id":"PRO_PRE_SOC",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"PRO_CES", "struct_id":"Estructura Base","sequence": 66 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Provisión cesantías",   					"condition_python":"result = payslip.liquidar_por in('nomina','vacaciones','definitiva') and contract.tipo_salario=='tradicional'",   "amount_python_compute":"if payslip.liquidar_por in('nomina','vacaciones'):\n   result = BAS_PRE_SOC/12\nelif payslip.liquidar_por in('definitiva'):\n   saldo = contract.saldo_cesantias if contract.fecha_corte and payslip.date_from_cesantias<contract.fecha_corte else 0\n   provisionado = payslip.sum('PRO_CES',payslip.date_from_cesantias,contract.date_end)+saldo-payslip.sum('CES',payslip.date_from_cesantias,contract.date_end)\n   result = CES-provisionado",   "category_id":"PRO_PRE_SOC",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"PRO_INT_CES", "struct_id":"Estructura Base", "sequence": 67 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Provisión intereses de cesantías",   	"condition_python":"result = payslip.liquidar_por in('nomina','vacaciones','definitiva') and contract.tipo_salario=='tradicional'",   "amount_python_compute":"if payslip.liquidar_por in('nomina','vacaciones'):\n    date_start_year = payslip.date_from.replace(day=1,month=1)\n    #Se inicia al comienzo del año o al inicio del contrato\n    if  date_start_year >= contract.date_start:\n        pro_ces_acum = payslip.sum('PRO_CES',date_start_year,payslip.date_to) + PRO_CES\n        if payslip.liquidar_por == 'nomina': \n          days_worked = payslip.env['hr.payslip'].get_days_worked(payslip.employee_id, date_start_year, payslip.date_to) + payslip.dias - payslip.nod_unpaid_leaves - payslip.dias_vacaciones\n        else:\n           days_worked = payslip.env['hr.payslip'].get_days_worked(payslip.employee_id, date_start_year, payslip.date_to) + payslip.dias_vacaciones\n        \n        pro_int_ces_acum = payslip.sum('PRO_INT_CES',date_start_year,payslip.date_to)\n        #El interes acumulado correspon al 12% de las cesantias por los días trabajados sobre 360  \n        int_acum = (pro_ces_acum * 0.12 * days_worked )/360\n        diff = int_acum - pro_int_ces_acum \n\n        #La diferencia de interes acumulado y la provisión es menor a 0 no se adiciona provisión en la nómina actual\n        if diff <= 0:\n           result = 0\n        else:\n           result = diff \n\n\nelif payslip.liquidar_por in('definitiva'):\n    saldo = contract.saldo_intereses_cesantias if contract.fecha_corte and payslip.date_from_cesantias<contract.fecha_corte else 0\n    provisionado = payslip.sum('PRO_INT_CES',payslip.date_from_cesantias,contract.date_end)+saldo-payslip.sum('INT_CES',payslip.date_from_cesantias,contract.date_end)\n    result = INT_CES-provisionado",   "category_id":"PRO_PRE_SOC",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"BAS_VAC", "struct_id":"Estructura Base", "sequence": 68 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Base vacaciones",   					"condition_python":"result = payslip.liquidar_por in('nomina','vacaciones') and contract.tipo_salario in('tradicional','integral')",   "amount_python_compute":"try:\n  auxilio_transporte=AUX_TRA\n  auxilio_transporte=(payslip.aux_trans if contract.wage < payslip.smlv * 2 else 0)*(payslip.dias-payslip.nod_unpaid_leaves)/30\nexcept :\n  auxilio_transporte=0\nresult = BAS_PRE_SOC-(categories.HOR_EXT + categories.RECARGO - categories.HRN)-auxilio_transporte",   "category_id":"BAS_CAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"PRO_VAC", "struct_id":"Estructura Base", "sequence": 69 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Provisión vacaciones",   					"condition_python":"result = payslip.liquidar_por in('nomina','vacaciones') and contract.tipo_salario in('tradicional','integral')",   "amount_python_compute":"result = BAS_VAC/24",   "category_id":"PRO_PRE_SOC",   "quantity":"1.0",   "origin_partner":"employee"},

      {"code":"SAL_TRA",  "struct_id":"Estructura Base", "sequence": 91 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"1000.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"BAS",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Salario tradicional",   "condition_python":"result = payslip.liquidar_por in('nomina') and contract.tipo_salario in('tradicional')",   "amount_python_compute":"result = SUELDO",   "category_id":"DCONT",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"SAL_INT", "struct_id":"Estructura Base",   "sequence": 92 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Salario integral",   "condition_python":"result = payslip.liquidar_por in('nomina') and contract.tipo_salario=='integral'",   "amount_python_compute":"result = SUELDO",   "category_id":"DCONT",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"BRU", "struct_id":"Estructura Base",  "sequence": 93 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Subtotal ingresos",   "condition_python":"result = True ",   "amount_python_compute":"result = categories.ING + categories.PRE_SOC",   "category_id":"BRU",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"AUX_EST",  "struct_id":"Estructura Base", "sequence": 94 ,   "appears_on_payslip":"",   "condition_range":"contract.wage",   "amount_fix":"1000.00",      "amount_percentage":"100.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"BAS",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Remuneracion estudiante",   "condition_python":"result = payslip.liquidar_por in('nomina','definitiva') and contract.tipo_salario in('pasante','practicante','aprendiz Sena')",   "amount_python_compute":"result = SUELDO",   "category_id":"DCONT",   "quantity":"1.0",   "origin_partner":"employee"},
      
      {"code":"BAS_GRA_RTF",  "struct_id":"Estructura Base", "sequence": 95 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.00",      "amount_percentage":"0.0000",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"0",   "name":"Base Gravable Retefuente",   "condition_python":"result = payslip.liquidar_por in('nomina','vacaciones','definitiva','prima') and contract.tipo_salario in('tradicional','integral') and (payslip.date_to == payslip.last_day_month)",   "amount_python_compute":"# Total pagos laborales en el mes (suma categoria ING-Ingresos de nominas anteriores + la actual )\ntotal_ingresos = 0\nif payslip.liquidar_por != 'prima':\n total_ingresos = payslip.sum_category('ING_SAL', payslip.first_day_month, payslip.last_day_month) + payslip.sum_category('ING_NO_SAL',payslip.first_day_month, payslip.last_day_month)\ntotal_ingresos += categories.ING\n\n\n# Ingresos no constitutivos de renta ni ganancia ocasional\ntotal_ingresos_nconst = 0\n     # Para nominas anteriores (No aplica para la prima)\nif payslip.liquidar_por != 'prima':\n total_ingresos_nconst += payslip.sum('AFP_TRA',payslip.first_day_month, payslip.last_day_month)\n total_ingresos_nconst += payslip.sum('FON_SOL_SOL' ,payslip.first_day_month, payslip.last_day_month)\n total_ingresos_nconst += payslip.sum('FON_SOL_SUB' ,payslip.first_day_month, payslip.last_day_month)\n total_ingresos_nconst += payslip.sum('EPS_TRA', payslip.first_day_month, payslip.last_day_month)\n     # Para nomina actual\ntry:\n total_ingresos_nconst += AFP_TRA\nexcept :\n total_ingresos_nconst += 0\ntry:\n total_ingresos_nconst += FON_SOL_SOL\nexcept :\n total_ingresos_nconst += 0\ntry:\n total_ingresos_nconst += FON_SOL_SUB\nexcept :\n total_ingresos_nconst += 0\ntry:\n total_ingresos_nconst += EPS_TRA\nexcept :\n total_ingresos_nconst += 0\n\n\nsubtotal_A = total_ingresos -  total_ingresos_nconst\n\n\n# Total Deducciones\ntotal_deducciones = 0\nif payslip.liquidar_por != 'prima':\n\n if employee.int_vivienda < 100*payslip.valor_uvt:\n  total_deducciones += employee.int_vivienda\n else:\n  total_deducciones += 100*payslip.valor_uvt\n\n if employee.med_prep < 16*payslip.valor_uvt:\n  total_deducciones += employee.med_prep\n else:\n  total_deducciones += 16*payslip.valor_uvt\n\n if employee.dependientes < min(total_ingresos*0.1, 32*payslip.valor_uvt):\n  total_deducciones += employee.dependientes\n else:\n  total_deducciones += min(total_ingresos*0.1, 32*payslip.valor_uvt)\n\n\n# Rentas Excentas\ntotal_rentas_exentas = 0\nif payslip.liquidar_por != 'prima':\n try:\n  total_rentas_exentas += FPV\n except :\n  total_rentas_exentas += 0\n try:\n  total_rentas_exentas += AFC\n except :\n  total_rentas_exentas += 0\n try:\n  total_rentas_exentas += AVC\n except :\n  total_rentas_exentas += 0\n     # Limite que aplica a las rentas exentas sumadas hata aqui\n if total_rentas_exentas > min(payslip.valor_uvt*(3800/12), total_ingresos*0.3):\n  total_rentas_exentas = min(payslip.valor_uvt*(3800/12), total_ingresos*0.3)\n\n      # Rentas exentas que ingresan por Otras entradas (nominas anteriores, no aplica prima)\n total_rentas_exentas  += payslip.sum('IND_ACC_ENF', payslip.first_day_month, payslip.last_day_month)\n total_rentas_exentas  += payslip.sum('IND_PRO_MAT', payslip.first_day_month, payslip.last_day_month)\n total_rentas_exentas  += payslip.sum('GAS_ENT', payslip.first_day_month, payslip.last_day_month)\n\n     # Rentas exentas que ingresan por Otras entradas (nomina actual)\nif inputs.IND_ACC_ENF and inputs.IND_ACC_ENF.amount:\n total_rentas_exentas += IND_ACC_ENF.amount\nif inputs.IND_PRO_MAT and inputs.IND_PRO_MAT.amount:\n total_rentas_exentas += IND_PRO_MAT\nif inputs.GAS_ENT and inputs.GAS_ENT.amount:\n total_rentas_exentas += GAS_ENT\n\n\nsubtotal_B = subtotal_A - total_deducciones - total_rentas_exentas\n\n\n# El veinticinco por ciento (25%) del valor total de los pagos laborales, limitada mensualmente a doscientas cuarenta (240) UVT. (Numeral 10 art. 206 ET)\nporcentaje_exento = subtotal_B*0.25\nif porcentaje_exento > 240*payslip.valor_uvt:\n porcentaje_exento = 240*payslip.valor_uvt\n\n\n# Limite general de rectas excentas y deducciones,  40% del ingreso neto y hasta 5040 UVT /12 (año)\nexentas_descuentos = porcentaje_exento + total_rentas_exentas + total_deducciones\nexentas_descuentos = min(exentas_descuentos, payslip.valor_uvt*(5040/12), subtotal_A*0.4)\n\n\n# Prima de servicios \nbase_retencion_prima = 0\nif payslip.liquidar_por in ('prima','definitiva') and  contract.tipo_salario=='tradicional':\n try:\n  total_prima = PRI_SER\n except :\n  total_prima = 0\n limite_uvt = payslip.valor_uvt*240\n exento_prima = porcentaje_exento + total_prima*0.25\n if exento_prima > limite_uvt:\n  total_renta_exenta_prima = limite_uvt - porcentaje_exento\n else:\n  total_renta_exenta_prima = total_prima*0.25\n base_retencion_prima += total_prima -  total_renta_exenta_prima\n\n# Resultado según el tipo de nomina\n#if payslip.liquidar_por == 'prima':\n# result = base_retencion_prima\n#else: \n# result = subtotal_A - exentas_descuentos\nresult = subtotal_A - exentas_descuentos + base_retencion_prima",   "category_id":"BAS_CAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"RET_FTE", "struct_id":"Estructura Base",  "sequence": 96 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"0",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Retención en la fuente",   "condition_python":"result = payslip.liquidar_por in('nomina','vacaciones','definitiva','prima') and contract.tipo_salario in('tradicional','integral') and (payslip.date_to == payslip.last_day_month)",   "amount_python_compute":"result = 0\n\n# Si es el procedimiento 1 o si es procedimiento 2 pero aun no tiene porcentaje fijo  calculado (Se cambio al proc. 2 pero no ha llegado la fecha del calculo del porcentaje) \nif contract.retencion_fuente == 'procedimiento1' or (contract.retencion_fuente == 'procedimiento2' and not contract.withholding_percentage_id):\n # conversión base gravable a UVT\n base_gravable_uvt = round(BAS_GRA_RTF/payslip.valor_uvt, 1)\n\n          \n # Calculo del valor de la retención en base a la tabla de retención\n valor_retencion = 0\n for record in contract.retefuente_table_value_ids:\n  if base_gravable_uvt >= record.range_from and base_gravable_uvt < record.range_to:\n   valor_retencion = ((base_gravable_uvt - record.range_from)*(record.marginal_rate/100)+record.uvt_added)*payslip.valor_uvt\n\n result = round(valor_retencion,-3)\n\n#result = base_gravable_uvt\nif contract.retencion_fuente == 'procedimiento2' and contract.withholding_percentage_id:\n result = BAS_GRA_RTF * (contract.withholding_percentage_id.percentage_value/100)\n",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"dian"},
      
      {"code":"DEDUCCION_ANTICIPO", "struct_id":"Estructura Base",  "sequence": 101 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"DEDUCCION_ANTICIPO",   "condition_python":"result= inputs.DEDUCCION_ANTICIPO and inputs.DEDUCCION_ANTICIPO.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result = inputs.DEDUCCION_ANTICIPO.amount",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"SANCION_PUBLIC", "struct_id":"Estructura Base",  "sequence": 102 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"SANCION_PUBLIC",   "condition_python":"result= inputs.SANCION_PUBLIC and inputs.SANCION_PUBLIC.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result = inputs.SANCION_PUBLIC.amount",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"SANCION_PRIV", "struct_id":"Estructura Base",  "sequence": 103 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"SANCION_PRIV",   "condition_python":"result= inputs.SANCION_PRIV and inputs.SANCION_PRIV.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result = inputs.SANCION_PRIV.amount",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"SINDICATOS", "struct_id":"Estructura Base",  "sequence": 104 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"SINDICATOS",   "condition_python":"result= inputs.SINDICATOS and inputs.SINDICATOS.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result = inputs.SINDICATOS.amount",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"LIBRANZAS", "struct_id":"Estructura Base",  "sequence": 105 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"LIBRANZAS",   "condition_python":"result= inputs.LIBRANZAS and inputs.LIBRANZAS.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result =inputs.LIBRANZAS.amount ",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"PAGOS_TERCEROS", "struct_id":"Estructura Base",  "sequence": 106 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"PAGOS_TERCEROS",   "condition_python":"result= inputs.PAGOS_TERCEROS and inputs.PAGOS_TERCEROS.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result = inputs.PAGOS_TERCEROS.amount",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"EMBARGO_FISCAL", "struct_id":"Estructura Base",  "sequence": 107 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"EMBARGO_FISCAL",   "condition_python":"result= inputs.EMBARGO_FISCAL and inputs.EMBARGO_FISCAL.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result = inputs.EMBARGO_FISCAL.amount",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"EDUCACION", "struct_id":"Estructura Base",  "sequence": 108 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"EDUCACION",   "condition_python":"result= inputs.EDUCACION and inputs.EDUCACION.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result = inputs.EDUCACION.amount",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"DEDUCCION_REINTEGRO", "struct_id":"Estructura Base",  "sequence": 109 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"DEDUCCION_REINTEGRO",   "condition_python":"result= inputs.DEDUCCION_REINTEGRO and inputs.DEDUCCION_REINTEGRO.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result = inputs.DEDUCCION_REINTEGRO.amount",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"DEUDA", "struct_id":"Estructura Base",  "sequence": 110 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"DEUDA",   "condition_python":"result= inputs.DEUDA and inputs.DEUDA.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result =inputs.DEUDA.amount ",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"DEDUCCION_COOPERATIVA", "struct_id":"Estructura Base",  "sequence": 111 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"DEDUCCION_COOPERATIVA",   "condition_python":"result= inputs.DEDUCCION_COOPERATIVA and inputs.DEDUCCION_COOPERATIVA.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result =inputs.DEDUCCION_COOPERATIVA.amount ",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"OTRA_DEDUCCION", "struct_id":"Estructura Base",  "sequence": 112 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"OTRA_DEDUCCION",   "condition_python":"result= inputs.OTRA_DEDUCCION and inputs.OTRA_DEDUCCION.amount and payslip.liquidar_por in('nomina','vacaciones','definitiva')",   "amount_python_compute":"result =inputs.OTRA_DEDUCCION.amount ",   "category_id":"DED",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"TOTAL_DEDUCCION", "struct_id":"Estructura Base",  "sequence": 113 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Total deducciones",   "condition_python":"result= categories.DED",   "amount_python_compute":"result = categories.DED",   "category_id":"BAS_CAL",   "quantity":"1.0",   "origin_partner":"employee"},
      {"code":"NET", "struct_id":"Estructura Base",  "sequence": 121 ,   "appears_on_payslip":"True",   "condition_range":"contract.wage",   "amount_fix":"0.0",      "amount_percentage":"0.0",   "condition_range_min":"",   "condition_select":"python",   "amount_percentage_base":"",   "amount_select":"code",   "active":"True",   "condition_range_max":"",   "name":"Total a pagar",   "condition_python":"result = True ",   "amount_python_compute":"result = categories.ING +categories.PRE_SOC - categories.DED",   "category_id":"NET",   "quantity":"1.0",   "origin_partner":"employee"}
  ]
}
